let employees = [];
let soundOn = true;
let MAX_DRAW_NUMBER;
let previousEmployees = [];
let shownEmployeeIds = new Set(); // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏à‡∏≥‡∏ß‡πà‡∏≤‡πÉ‡∏Ñ‡∏£‡πÄ‡∏Ñ‡∏¢ render ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
let currentPhase = null;
let autoRefreshInterval = null;
let finalWinner = null;
let finalLoser = null;

document.addEventListener('DOMContentLoaded', async () => {
  await loadConfig();          // ‡πÇ‡∏´‡∏•‡∏î MAX_DRAW_NUMBER
  await loadPhase();          // ‡πÇ‡∏´‡∏•‡∏î Phase ‡πÉ‡∏´‡πâ currentPhase ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
  await loadEmployees();      // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  setupControls();
  updateControls();
  updateStatusText();         // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
  startAutoRefreshIfNeeded(); // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏≠‡∏ô‡∏£‡∏π‡πâ phase ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß
});

function startAutoRefreshIfNeeded() {
  if (autoRefreshInterval) {
    clearInterval(autoRefreshInterval);
  }
  if (currentPhase === 'register') {
    autoRefreshInterval = setInterval(() => {
      loadEmployees();
    }, 5000);
  }
}

function setupControls() {
  document.getElementById('randomBtn').addEventListener('click', handleRandom);
  document.getElementById('resetBtn').addEventListener('click', handleReset);
  document.getElementById('soundToggle').addEventListener('click', toggleSound);
  document.getElementById('startBtn').addEventListener('click', handleStart);
  document.getElementById('openRegisterBtn').addEventListener('click', handleOpenRegister);
}

async function loadEmployees() {
  // ‚úÖ [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å loadEmployees ‡∏Å‡πà‡∏≠‡∏ô config ‡∏´‡∏£‡∏∑‡∏≠ phase ‡∏û‡∏£‡πâ‡∏≠‡∏°
  if (!MAX_DRAW_NUMBER) {
    await loadConfig();
  }

  if (!currentPhase) {
    await loadPhase();
  }

  updateControls();
  updateStatusText();

  try {
    const res = await fetch('/api/employees');
    const newData = await res.json();

    employees = newData;
    renderGrid(newData, previousEmployees);
    renderFooter(newData);

    previousEmployees = newData;
    updateStatusText(newData); // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  } catch (err) {
    console.error('‚ùå Failed to load employees:', err);
  }
}

function renderGrid(current, previous) {
  const grid = document.getElementById('gridContainer');
  grid.innerHTML = '';

  const currentShown = new Set(); // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏≠‡∏ö‡∏´‡∏ô‡πâ‡∏≤

  const assignedMap = new Map();
  current.forEach(emp => {
    if (emp.drawNumber != null) assignedMap.set(emp.drawNumber, emp);
  });

  for (let i = 1; i <= MAX_DRAW_NUMBER; i++) {
    const slot = document.createElement('div');
    slot.classList.add('slot');

    const emp = assignedMap.get(i);

    if (emp) {
      const slotStatus = (emp.status || 'IN').toUpperCase();
      slot.classList.add(`status-${slotStatus}`);
      slot.setAttribute('data-employee-id', emp.employeeId);

      slot.innerHTML = `
        <div class="slot-content">
          <div class="photo">
            <img src="${emp.photo}" alt="Photo">
          </div>
          <div class="number">${emp.drawNumber}</div>
        </div>
      `;

      // ‚úÖ ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏à‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‚Üí ‡πÅ‡∏™‡∏î‡∏á effect
      const isNewToWall = !shownEmployeeIds.has(emp.employeeId);
      currentShown.add(emp.employeeId);

      if (isNewToWall) {
        requestAnimationFrame(() => {
          slot.classList.add('new-register');
        });
        playSound('assign');
      }

    } else {
      slot.innerHTML = `
        <div class="slot-content">
          <div class="photo">
            <img src="/images/logo_nct.png" alt="Waiting" class="placeholder">
          </div>
          <div class="number">${i}</div>
        </div>
      `;
    }

    grid.appendChild(slot);
  }

  // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏ß‡πà‡∏≤ employeeId ‡πÑ‡∏´‡∏ô‡πÄ‡∏Ñ‡∏¢‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏•‡πâ‡∏ß (‡πÉ‡∏ä‡πâ‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ)
  shownEmployeeIds = currentShown;
}

function renderFooter(employees) {
  const footer = document.getElementById('outListScroll');
  const outList = employees
    .filter((emp) => emp.status?.toUpperCase() === "OUT")
    .map((emp) => `${emp.name} #${emp.drawNumber}`)
    .join(" | ");

  footer.textContent = outList ? `OUT: ${outList}` : 'OUT: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡∏ï‡∏Å‡∏£‡∏≠‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ';
}

function updateStatusText(dataSource) {
  const statusDiv = document.getElementById('statusText');
  const data = dataSource || employees;

  if (currentPhase === 'register') {
    statusDiv.textContent = 'üì• Waiting for Registration';
    return;
  }

  if (currentPhase === 'random') {
    const inCount = data.filter(e =>
      e.drawNumber != null && e.status?.toUpperCase() !== 'OUT'
    ).length;

    if (inCount === 0) {
      statusDiv.textContent = '‚úÖ ‡∏á‡∏≤‡∏ô‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß üéâ';
    } else {
      statusDiv.textContent = `üé≤ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏∏‡πà‡∏°‡∏Ñ‡∏±‡∏î‡∏≠‡∏≠‡∏Å - ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${inCount} ‡∏Ñ‡∏ô`;
    }
  }
}

async function handleRandom() {

  const countValue = document.getElementById('countSelect').value;
    if (!countValue) {
    alert('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å');
    return;
  }
  console.log('countSelect.value =', countValue);

  const count = parseInt(countValue);
  if (!count || isNaN(count) || count <= 0) {
    alert('‚ùå ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å (‡πÄ‡∏ä‡πà‡∏ô 1 ‡∏Ñ‡∏ô)');
    return;
  }

  console.log('üî• handleRandom running with count:', count);
  await runLightAnimationAndRandom(count);
}


async function runLightAnimationAndRandom(count) {
  const slots = Array.from(document.querySelectorAll('.slot.status-IN'));
  if (slots.length === 0) {
    alert('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡πâ‡∏ß');
    return;
  }

  const remaining = slots.length;
  if (count >= remaining - 1) {
    alert(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å ${count} ‡∏Ñ‡∏ô‡πÑ‡∏î‡πâ ‚Äî ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà ${remaining} ‡∏Ñ‡∏ô‡πÉ‡∏ô‡πÄ‡∏Å‡∏°!\n‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏Ñ‡∏ô‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢`);
    return;
  }

  // üîÄ ‡∏™‡∏∏‡πà‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö slots ‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ (‡πÅ‡∏™‡∏î‡∏á animation ‡∏ß‡∏¥‡πà‡∏á)
  const flashOrder = [];
  const totalSteps = 40;
  for (let i = 0; i < totalSteps; i++) {
    const randomIndex = Math.floor(Math.random() * slots.length);
    flashOrder.push(slots[randomIndex]);
  }

  let delay = 50;
  for (let i = 0; i < flashOrder.length; i++) {
    slots.forEach(s => s.classList.remove('highlight'));
    flashOrder[i].classList.add('highlight');

    playSound('tick');
    await new Promise(res => setTimeout(res, delay));
    delay += 10;
  }

  // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∏‡πà‡∏°‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏£‡∏¥‡∏á
  const res = await fetch('/api/randomOut', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ count })
  });
  const data = await res.json();
  const outIds = data.out;

  // üéØ highlight ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏ô‡∏™‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å
  const allSlots = Array.from(document.querySelectorAll('.slot'));
  allSlots.forEach(s => s.classList.remove('highlight'));

  outIds.forEach(id => {
    const slot = allSlots.find(slot => slot.getAttribute('data-employee-id') === id);
    if (slot) {
      slot.classList.add('highlight');
    }
  });

  await new Promise(res => setTimeout(res, 1000));

  updateStatusText(employees); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡πà‡∏≠‡∏ô

  // üß† ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 2 ‡∏Ñ‡∏ô ‚Üí ‡πÅ‡∏™‡∏î‡∏á popup ‡∏Ñ‡∏π‡πà‡∏ä‡∏¥‡∏á
  const remainingPlayers = employees.filter(
    e => e.drawNumber != null && e.status?.toUpperCase() !== 'OUT'
  );
  if (remainingPlayers.length === 2) {
    const [a, b] = remainingPlayers;
    showFinalistsPopup(a, b);   // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á popup ‡∏Ñ‡∏π‡πà‡∏ä‡∏¥‡∏á‡∏Å‡πà‡∏≠‡∏ô
    await loadEmployees();      // ‚úÖ ‡∏Ñ‡πà‡∏≠‡∏¢‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å popup ‡πÅ‡∏•‡πâ‡∏ß
    return;
  }

  // ‚úÖ ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‚Üí ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• + ‡πÅ‡∏™‡∏î‡∏á popup ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å
  await loadEmployees();
  showEliminatedPopup(outIds);
}

function showEliminatedPopup(outIds) {
  if (!outIds || outIds.length === 0) return;

  const popup = document.getElementById('popup');
  const grid = document.getElementById('popup-grid');
  const title = document.getElementById('popup-title');

  grid.innerHTML = ''; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà

  outIds.forEach(id => {
    const emp = employees.find(e => e.employeeId === id);
    if (!emp) return;

    const card = document.createElement('div');
    card.classList.add('person');
    card.innerHTML = `
      <img src="${emp.photo}" alt="${emp.name}">
      <p>${emp.name}</p>
      <p>#${emp.drawNumber}</p>
    `;
    grid.appendChild(card);
  });

  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô title ‡∏ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏Ñ‡∏ô
  title.textContent = outIds.length > 1
    ? `‚ùå ‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‚ùå`
    : `‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‚ùå`;

  popup.classList.remove('hidden');
  playSound('eliminated');
}

function closePopup() {
  document.getElementById('popup').classList.add('hidden');
}

function showFinalistsPopup(a, b) {
  finalWinner = Math.random() < 0.5 ? a : b;
  finalLoser = finalWinner === a ? b : a;

  const popup = document.getElementById('popupFinalists');
  const grid = document.getElementById('finalists-grid');
  popup.classList.remove('hidden');

  grid.innerHTML = [finalWinner, finalLoser].map(emp => `
    <div class="person">
      <img src="${emp.photo}" alt="${emp.name}">
      <p>${emp.name}</p>
      <p>#${emp.drawNumber}</p>
    </div>
  `).join('');
}

async function handleReset() {
  if (!confirm('‚ö†Ô∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏à‡∏∞ Reset ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î?')) return;

  await fetch('/api/reset', { method: 'POST' });
  playSound('reset');
  await loadEmployees();
  startAutoRefreshIfNeeded();
}

async function handleStart() {
  if (!confirm('‚ö†Ô∏è ‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞ ‡∏õ‡∏¥‡∏î‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°?')) return;

  await fetch('/api/start', { method: 'POST' });
  await loadPhase();
  updateControls();
  await loadEmployees();             // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏ô‡πÉ‡∏´‡∏°‡πà
  updateStatusText(employees);      // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  startAutoRefreshIfNeeded();

  playSound('start');
  alert('üé§ ‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß! ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î ‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏∏‡πà‡∏° Random Out ‡πÑ‡∏î‡πâ');
}

function toggleSound() {
  soundOn = !soundOn;
  document.getElementById('soundToggle').textContent = soundOn ? 'üîä Sound On' : 'üîá Sound Off';
}

function playSound(action) {
  if (!soundOn) return;

  let audio;
  switch(action) {
    case 'random':
      audio = new Audio('/sounds/explosion.mp3');
      break;
    case 'reset':
      audio = new Audio('/sounds/reset.mp3');
      break;
    case 'start':
      audio = new Audio('/sounds/start.mp3');
      break;
    case 'assign':
      audio = new Audio('/sounds/ding.mp3');
      break;
    case 'tick':
      audio = new Audio('/sounds/tick.mp3');
      break;
    case 'eliminated':
      audio = new Audio('/sounds/eliminated.mp3');
      break;
    case 'winner':
      setTimeout(() => {
        new Audio('/sounds/winner.mp3').play(); // ‡∏°‡∏µ delay 1 ‡∏ß‡∏¥
      }, 1000);
      break;
    default:
      return;
  }
  audio.play();
}

async function loadConfig() {
  const res = await fetch('/api/config');
  const data = await res.json();
  MAX_DRAW_NUMBER = data.maxDrawNumber;
}

function updateControls() {
  console.log('updateControls phase:', currentPhase);

  const isRegister = currentPhase === 'register';
  const registeredCount = employees.filter(e => e.drawNumber != null).length;

  document.getElementById('randomBtn').disabled = currentPhase !== 'random';
  document.getElementById('resetBtn').disabled = isRegister;
  document.getElementById('startBtn').disabled = !isRegister || registeredCount === 0;
  document.getElementById('openRegisterBtn').disabled = isRegister;
  console.log('employees.length =', employees.length);
}


async function handleOpenRegister() {
  const pw = prompt('üîë Enter admin password:');
  if (pw == null) return;

  try {
    const res = await fetch('/api/openRegister', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ password: pw })
    });

    if (!res.ok) {
      const err = await res.json();
      alert(`‚ùå Error: ${err.error}`);
      return;
    }

    alert('‚úÖ Registration phase re-opened!');
    currentPhase = 'register';
    updateControls();
    await loadEmployees();
    startAutoRefreshIfNeeded();
    
  } catch (err) {
    console.error(err);
    alert('‚ùå Failed to reconnect to server');
  }
}

async function loadPhase() {
  const res = await fetch('/api/state');
  const data = await res.json();
  currentPhase = data.phase;
}

async function showCountdown() {
  const el = document.getElementById('countdown');
  const sequence = ['3', '2', '1'];
  el.classList.remove('hidden');

  for (let num of sequence) {
    el.textContent = num;
    await new Promise(res => setTimeout(res, 1000));
  }

  el.classList.add('hidden');
}

function dimExcept(finalTwoIds) {
  const allSlots = document.querySelectorAll('.slot');
  allSlots.forEach(slot => {
    const id = slot.getAttribute('data-employee-id');
    if (!finalTwoIds.includes(id)) {
      slot.classList.add('fade-out');
    }
  });
}

async function declareWinner(employeeId) {
  await fetch('/api/winner', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ employeeId })
  });

  await loadEmployees();

  const winner = employees.find(e => e.employeeId === employeeId);
  if (!winner) return;

  const popup = document.getElementById('popup');
  const grid = document.getElementById('popup-grid');
  const title = document.getElementById('popup-title');

  grid.innerHTML = `
    <div class="person" style="box-shadow: 0 0 25px gold;">
      <img src="${winner.photo}">
      <p>${winner.name}</p>
      <p>#${winner.drawNumber}</p>
    </div>
  `;
  title.textContent = `üëë ‡∏Ç‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞!`;
  popup.classList.remove('hidden');
  playSound('winner');
}

async function finalDuel(winnerId, loserId) {
  dimExcept([winnerId, loserId]);      // ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏ä‡πà‡∏≠‡∏á‡∏≠‡∏∑‡πà‡∏ô
  await showCountdown();               // 3..2..1

  const winnerSlot = document.querySelector(`.slot[data-employee-id="${winnerId}"]`);
  const loserSlot = document.querySelector(`.slot[data-employee-id="${loserId}"]`);

  // Highlight ‡πÑ‡∏õ‡∏°‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 2 ‡∏Ñ‡∏ô
  for (let i = 0; i < 6; i++) {
    winnerSlot.classList.toggle('highlight');
    loserSlot.classList.toggle('highlight');
    playSound('tick');
    await new Promise(res => setTimeout(res, 300));
  }

  await new Promise(res => setTimeout(res, 1000)); // silence 1 ‡∏ß‡∏¥

  // ‡∏•‡∏ö highlight
  winnerSlot.classList.remove('highlight');
  loserSlot.classList.remove('highlight');

  // ‡πÅ‡∏û‡πâ ‚Üí fade out
  loserSlot.style.opacity = '0.1';

  // ‡∏ä‡∏ô‡∏∞ ‚Üí zoom + glow
  winnerSlot.classList.add('zoom');
  winnerSlot.classList.add('status-WINNER');

  playSound('winner');
  await new Promise(res => setTimeout(res, 1000));

  declareWinner(winnerId);
}

async function startFinalDuel() {
  document.getElementById('popupFinalists').classList.add('hidden');

  dimExcept([finalWinner.employeeId, finalLoser.employeeId]);
  await showCountdown();

  const winnerSlot = document.querySelector(`.slot[data-employee-id="${finalWinner.employeeId}"]`);
  const loserSlot = document.querySelector(`.slot[data-employee-id="${finalLoser.employeeId}"]`);

  for (let i = 0; i < 6; i++) {
    winnerSlot.classList.toggle('highlight');
    loserSlot.classList.toggle('highlight');
    playSound('tick');
    await new Promise(res => setTimeout(res, 300));
  }

  await new Promise(res => setTimeout(res, 1000)); // silence ‡∏Å‡πà‡∏≠‡∏ô

  winnerSlot.classList.remove('highlight');
  loserSlot.classList.remove('highlight');

  loserSlot.style.opacity = '0.1';
  winnerSlot.classList.add('zoom');
  winnerSlot.classList.add('status-WINNER');

  playSound('winner');
  await new Promise(res => setTimeout(res, 1000));

  await declareWinner(finalWinner.employeeId);
}
